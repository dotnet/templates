# Responsible for producing the signed product build for insertion into the Visual Studio repository

pr: none
# Branches that trigger a build on commit
trigger:
  branches:
    include:
    - master
    - main
    - dev15.9.x
    - dev16.0.x
    - dev16.3.x
  paths:
    exclude: # don't trigger the CI if only a eng file was changed
    - eng/*
    - global.json
    - README.md

variables:
  BuildConfiguration: Release
  BuildPlatform: 'any cpu'
  TeamName: dotnet-templates
  SignType: real
  DropRoot: '\\cpvsbuild\drops'
  VisualStudioDropName: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)

jobs:
- ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
  - template: /eng/common/templates/job/onelocbuild.yml
    parameters:
      CreatePr: true
      LclSource: lclFilesfromPackage
      LclPackageId: 'LCL-JUNO-PROD-TEMPLATE'

- job: Build
  pool:
    name: VSEngSS-MicroBuild2019-1ES
    demands: Cmd
  steps:
  - checkout: self
    clean: true
  - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
    displayName: 'Install Signing Plugin'
    inputs:
      signType: $(SignType)
      esrpSigning: true
    condition: and(succeeded(), ne(variables['SignType'], ''))

  - task: MicroBuildSbomPlugin@1
    displayName: Install MicroBuild Sbom Plugin
    condition: and(succeeded(), ne(variables['SignType'], ''))

  - task: ms-vseng.MicroBuildTasks.32f78468-e895-4f47-962c-58a699361df8.MicroBuildSwixPlugin@1
    displayName: 'Install Swix Plugin'

  - script: eng\common\CIBuild.cmd 
              -configuration $(BuildConfiguration)
              /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
              /p:VisualStudioDropName=$(VisualStudioDropName)
              /p:DotNetSignType=$(SignType)
              /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
              /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
    displayName: Build

  # Publishes setup VSIXes to a drop.
  # Note: The insertion tool looks for the display name of this task in the logs.
  - task: ms-vseng.MicroBuildTasks.4305a8de-ba66-4d8b-b2d1-0dc4ecbbf5e8.MicroBuildUploadVstsDropFolder@1
    displayName: Upload VSTS Drop
    inputs:
      DropName: $(VisualStudioDropName)
      DropFolder: 'artifacts\VSSetup\$(BuildConfiguration)\Insertion'
      AccessToken: $(System.AccessToken)
      condition: succeeded()

  - task: PublishBuildArtifacts@1
    displayName: Publish Logs
    inputs:
      PathtoPublish: 'artifacts\log\$(BuildConfiguration)'
      ArtifactName: 'Build Logs'
    continueOnError: true
    condition: succeededOrFailed()
      
  # Publish an artifact that the RoslynInsertionTool is able to find by its name.
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact VSSetup
    inputs:
      PathtoPublish: 'artifacts\VSSetup\$(BuildConfiguration)'
      ArtifactName: 'VSSetup'
    condition: succeeded()

  - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1
    displayName: 'Execute cleanup tasks'

